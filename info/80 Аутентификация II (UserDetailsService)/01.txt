80 Аутентификация II (UserDetailsService)
(более простой и легкий вариант аутентификации)

Более сложный ручной вариант аутентификации
(scheme_auth.png)

Сложный вариант логики Провайдера
(AuthProviderImpl.png)

Более простой вариант логики провайдера
AuthProviderImpl2.png
Многие действия Spring Security может сделать сам

В простых стандартных случах можно не писать
свой Authentication Provider и действовать
по более простой схеме
(Non_auth_provider.png)

---

Польза сервисов для Spring Security
(service_security.png)
В своих классах мы реализовали стандартные
интерфейсы Spring Security - теперь он
будет знать как использовать наши классы
1) Знает какой метод вызвать в сервисе,
чтобы получить пользователя по имени
2) знает какие методы вызвать в пользователе,
чтобы получить имя пользователя и пароль

---

В каких случаях надо реализовывать свой
AuthenticationProvider
(when_provider.png)
Если у нас простая аутентификация которая проводится
на самом сервере (самый частый случай)
то мы делаем без AuthProviderImpl

Любая кастомная аутентификация
(например которая проводится на удаленном
центральном сервере - CAS)
требует AuthProviderImpl
При этом пароль чаще всего даже не хранится
на нашем сервере.

